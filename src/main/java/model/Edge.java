package model;

import model.neuron.Neuron;

import java.util.Random;

/**
 * Created by yuvalapidot.
 */
public class Edge {

    private double weight;
    private Neuron sourceNeuron;
    private Neuron destinationNeuron;

    private double accumulatedError = 0;
    private int batchSize = 0;

    /**
     * Directed Edge from source neuron to destination neuron with random weight
     * @param sourceNeuron source neuron of the edge
     * @param destinationNeuron destination neuron of the edge
     */
    public Edge(Neuron sourceNeuron, Neuron destinationNeuron) {
        this(new Random(), sourceNeuron, destinationNeuron);
    }

    /**
     * Directed Edge from source neuron to destination neuron with random weight generated by given random
     * @param random to generate weight
     * @param sourceNeuron source neuron of the edge
     * @param destinationNeuron destination neuron of the edge
     */
    public Edge(Random random, Neuron sourceNeuron, Neuron destinationNeuron) {
        this(random.nextDouble(), sourceNeuron, destinationNeuron);
    }

    /**
     * Directed Edge from source neuron to destination neuron with given weight
     * @param weight initial weight of the edge
     * @param sourceNeuron source neuron of the edge
     * @param destinationNeuron destination neuron of the edge
     */
    public Edge(double weight, Neuron sourceNeuron, Neuron destinationNeuron) {
        this.weight = weight;
        this.sourceNeuron = sourceNeuron;
        this.destinationNeuron = destinationNeuron;
    }

    public double getWeight() {
        return weight;
    }

    public Neuron getSourceNeuron() {
        return sourceNeuron;
    }

    public void setSourceNeuron(Neuron sourceNeuron) {
        this.sourceNeuron = sourceNeuron;
    }

    public Neuron getDestinationNeuron() {
        return destinationNeuron;
    }

    public void setDestinationNeuron(Neuron destinationNeuron) {
        this.destinationNeuron = destinationNeuron;
    }

    /**
     * Feed forward the output of source neuron to destination neuron
     */
    public void feedForward() {
        output(sourceNeuron.getOutput() * weight);
    }

    /**
     * Back propagate the error of the destination neuron to source neuron
     * Accumulating the error of this weight in the process
     */
    public void backPropagate() {
        accumulatedError += destinationNeuron.getError() * sourceNeuron.getOutput();
        batchSize++;
        sourceNeuron.accumulateError(weight * destinationNeuron.getError());
    }

    /**
     * Fix the weight of this edge by learning rate
     * @param learningRate to fix the weight
     */
    public void fixWeight(double learningRate) {
        weight -= (learningRate / batchSize) * accumulatedError;
        accumulatedError = 0;
        batchSize = 0;
    }

    private void output(double output) {
        destinationNeuron.input(output);
    }
}
